Question URL: https://exploit.education/nebula/level-13/

Source code snippet:
#include <stdlib.h>
#include <unistd.h>
#include <stdio.h>
#include <sys/types.h>
#include <string.h>

#define FAKEUID 1000

int main(int argc, char **argv, char **envp)
{
  int c;
  char token[256];

  if(getuid() != FAKEUID) {
      printf("Security failure detected. UID %d started us, we expect %d\n", getuid(), FAKEUID);
      printf("The system administrators will be notified of this violation\n");
      exit(EXIT_FAILURE);
  }

  // snip, sorry :)

  printf("your token is %s\n", token);
  
}

Code Analysis:
a. The program grabs the uid of invoking this program. If the uid of the invoking user is not 1000, the program exits out with error.
b. If the uid of invoking user is 1000, the program prints the tokey key, which will be the password of flag13 user.

Attack scenario:
a. Unlike the prvious vulnerabilities, there is no place where users input can be provided as the input of the program. Dang!
b. If we can modify the uid of invoking user (level13 with the uid 1014) to the expected udi, which is 1000, we can get the token.
c. We need to go deeper.. let's use gdb..

Sol.
level13@nebula:/home/flag13$ gdb flag13
GNU gdb (Ubuntu/Linaro 7.3-0ubuntu2) 7.3-2011.08
Copyright (C) 2011 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "i686-linux-gnu".
For bug reporting instructions, please see:
<http://bugs.launchpad.net/gdb-linaro/>...
Reading symbols from /home/flag13/flag13...(no debugging symbols found)...done.
(gdb) b main                                              <== Break on main()
Breakpoint 1 at 0x80484c9
(gdb) r                                                   <== Run program
Starting program: /home/flag13/flag13

Breakpoint 1, 0x080484c9 in main ()
(gdb) x/20i main                                          <== Show 20 address instructions of main()
   0x80484c4 <main>:    push   %ebp
   0x80484c5 <main+1>:  mov    %esp,%ebp
   0x80484c7 <main+3>:  push   %edi
   0x80484c8 <main+4>:  push   %ebx
=> 0x80484c9 <main+5>:  and    $0xfffffff0,%esp
   0x80484cc <main+8>:  sub    $0x130,%esp
   0x80484d2 <main+14>: mov    0xc(%ebp),%eax
   0x80484d5 <main+17>: mov    %eax,0x1c(%esp)
   0x80484d9 <main+21>: mov    0x10(%ebp),%eax
   0x80484dc <main+24>: mov    %eax,0x18(%esp)
   0x80484e0 <main+28>: mov    %gs:0x14,%eax
   0x80484e6 <main+34>: mov    %eax,0x12c(%esp)
   0x80484ed <main+41>: xor    %eax,%eax
   0x80484ef <main+43>: call   0x80483c0 <getuid@plt>
   0x80484f4 <main+48>: cmp    $0x3e8,%eax
   0x80484f9 <main+53>: je     0x8048531 <main+109>
   0x80484fb <main+55>: call   0x80483c0 <getuid@plt>
   0x8048500 <main+60>: mov    $0x80486d0,%edx
   0x8048505 <main+65>: movl   $0x3e8,0x8(%esp)
   0x804850d <main+73>: mov    %eax,0x4(%esp)
(gdb) b *main+48                                          <== Set a breakpoint which is 48 bytes away from main()
Breakpoint 2 at 0x80484f4
(gdb) c                                                   <== Continue
Continuing.

Breakpoint 2, 0x080484f4 in main ()
(gdb) p $eax                                              <== Print the value of $eax register
$1 = 1014
(gdb) set $eax=1000                                       <== Set $eax register with the value 1000
(gdb) p $eax                                              <== Print the value of $eax register
$2 = 1000
(gdb) c                                                   <== Continue
Continuing.
your token is b705702b-76a8-42b0-8844-3adabbe5ac58        <= We got the token key here!!
[Inferior 1 (process 3644) exited with code 063]
(gdb) quit
level13@nebula:/home/flag13$ ssh flag13@127.0.0.1

      _   __     __          __
     / | / /__  / /_  __  __/ /___ _
    /  |/ / _ \/ __ \/ / / / / __ `/
   / /|  /  __/ /_/ / /_/ / / /_/ /
  /_/ |_/\___/_.___/\__,_/_/\__,_/

    exploit-exercises.com/nebula


For level descriptions, please see the above URL.

To log in, use the username of "levelXX" and password "levelXX", where
XX is the level number.

Currently there are 20 levels (00 - 19).


flag13@127.0.0.1's password:
Welcome to Ubuntu 11.10 (GNU/Linux 3.0.0-12-generic i686)

 * Documentation:  https://help.ubuntu.com/
New release '12.04 LTS' available.
Run 'do-release-upgrade' to upgrade to it.

flag13@nebula:~$ id
uid=986(flag13) gid=986(flag13) groups=986(flag13)
flag13@nebula:~$ getflag
You have successfully executed getflag on a target account
flag13@nebula:~$
