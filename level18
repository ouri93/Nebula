Question URL: https://exploit.education/nebula/level-18/

Source Code:
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <stdio.h>
#include <sys/types.h>
#include <fcntl.h>
#include <getopt.h>

struct {
  FILE *debugfile; // File descriptor
  int verbose;
  int loggedin;
} globals;

// Variadic macro - A macro used to accept a varying number of arguments
// __VA_ARGS__: Variable number of arguments. During macro expansion each
// occurrence of the special identifier __VA_ARGS__ in the macro replacement
// list is replaced by the passed arguments
// Example
// #define DEBUG(...) printString(__VA_ARGS__)
// DEBUG("foo", "bar", "baz") is replaced with printString("foo", "bar", "baz")

#define dprintf(...) if(globals.debugfile) \
  fprintf(globals.debugfile, __VA_ARGS__)
#define dvprintf(num, ...) if(globals.debugfile && globals.verbose >= num) \
  fprintf(globals.debugfile, __VA_ARGS__)

#define PWFILE "/home/flag18/password"

// Take a password file as an Input and compare the password from the password
// file and a given password. If exact match is found( return 0), set
// globals.loggedin value to 1
void login(char *pw)
{
  FILE *fp;

  fp = fopen(PWFILE, "r");
  if(fp) {
      char file[64];

      if(fgets(file, sizeof(file) - 1, fp) == NULL) {
          dprintf("Unable to read password file %s\n", PWFILE);
          return;
      }
                fclose(fp);
      if(strcmp(pw, file) != 0) return;
  }
  dprintf("logged in successfully (with%s password file)\n",
      fp == NULL ? "out" : "");

  globals.loggedin = 1;

}

// If notsupported() is called, display error message and if globals.debugfile
// is defined, write "what" argument into the debugfile.
void notsupported(char *what)
{
  char *buffer = NULL;
  asprintf(&buffer, "--> [%s] is unsupported at this current time.\n", what);
  dprintf(what);
  free(buffer);
}

// If setuser(char *user) is called, display an error message and print the
// message to stdout
void setuser(char *user)
{
  char msg[128];

  sprintf(msg, "unable to set user to '%s' -- not supported.\n", user);
  printf("%s\n", msg);

}

// Takes options -d debugfile_name and/or -v
int main(int argc, char **argv, char **envp)
{
  char c;

  // Do while loop until all options are taken care.
  // d option: Save file descriptor to globals.debugfile. If file open fails
  //           print "Unable to open filename"
  //           If file open successes, immediately write(_IONBF) stream content
  //           to globals.debugfile
  // v option: Increase globals.verbose value by one. 'v' option can be more
  //           than one, like '-vvv' for increased verbosity
  while((c = getopt(argc, argv, "d:v")) != -1) {
      switch(c) {
          case 'd':
              globals.debugfile = fopen(optarg, "w+");
              if(globals.debugfile == NULL) err(1, "Unable to open %s", optarg);
              // int setvbuf(FILE *stream, char *buffer, int mode, size_t size)
              // Used to control or how a stream should be buffered.
              // If buffer is set to null, the function automatically allocates
              // a buffer of the specified size.
              // mode: Determine when to write streaming content
              //      _IOFBF: Full buffering. Content is written when buffer is
              //              full
              //      _IOLBF: Line buffering. When a newline is inserted
              //      _IONBF: No buffering. Immediately write
              setvbuf(globals.debugfile, NULL, _IONBF, 0);
              break;
          case 'v':
              globals.verbose++;
              break;
      }
  }

  dprintf("Starting up. Verbose level = %d\n", globals.verbose);

  setresgid(getegid(), getegid(), getegid());
  setresuid(geteuid(), geteuid(), geteuid());

  while(1) {
      char line[256];
      char *p, *q;

      q = fgets(line, sizeof(line)-1, stdin);
      if(q == NULL) break;
      // strchr(const char *s, int c) - Locate character in string
      // If a match is found(linefeend and newline), replace newline and
      // linefeed with 0 - Make inputs to one line
      p = strchr(line, '\n'); if(p) *p = 0;
      p = strchr(line, '\r'); if(p) *p = 0;

      // If globals.debugfile is defined and globals.verbose is greater than
      // 2 like -vv or -vvv, write the input(line) into global.debugfile
      dvprintf(2, "got [%s] as input\n", line);

      if(strncmp(line, "login", 5) == 0) {
          dvprintf(3, "attempting to login\n");
          // Input format: login password
          login(line + 6);
      } else if(strncmp(line, "logout", 6) == 0) {
          globals.loggedin = 0;
      } else if(strncmp(line, "shell", 5) == 0) {
          dvprintf(3, "attempting to start shell\n");
          if(globals.loggedin) {
              execve("/bin/sh", argv, envp);
              err(1, "unable to execve");
          }
          dprintf("Permission denied\n");
      } else if(strncmp(line, "logout", 4) == 0) {
          globals.loggedin = 0;
      } else if(strncmp(line, "closelog", 8) == 0) {
          if(globals.debugfile) fclose(globals.debugfile);
          globals.debugfile = NULL;
      } else if(strncmp(line, "site exec", 9) == 0) {
          // Input format: site exec Hello
          notsupported(line + 10);
      } else if(strncmp(line, "setuser", 7) == 0) {
          // Input format: setuser username
          setuser(line + 8);
      }
  }

  return 0;
}

What is format string?
- Format String is the combination of string text and Format Parameters.
 : e.g. printf("The magic number is %d\n", 1911) => "The magic number is" is string text and "%d" is format parameter.
- Format parameters and its role within format string vulnerability
 : %x - Read stack values. With exploits, you can re-construct stack memory(stack dump - Allow us to understand program flow, local 
 function variables, and correct offset for exploitation). %x increase the internal stack pointer of printf toward the top of the stack.
 : %s - Read specific memory until null is met from a given address in stack. With exploits, you can see different memory location
 other than stack memory.
 : %n - Write the number of written bytes so far into a specified (int *) address in a stack

What is ASLR?
- Address space layout randomization (ASLR) is a memory-protection process for operating systems (OSes) that guards 
against buffer-overflow attacks by randomizing the location where system executables are loaded into memory.
- With ASLR, stack,heap, and library addresses keep changing per execution.
 : Run  "$ cat /proc/self/maps" command multiple times, you can see 
- To fully utilize ASLR, you must complile your code with Position Independent Executable"-pie -fPIE"

* How to disable ASLR?
  : If ASLR is enabled, the value of /proc/sys/kernel/randomize_va_space is 2. 0 means disabling ASLR. To disable ASLR,
   use the following commands.
    $sudo -s
    # echo 0 | tee /proc/sys/kernel/randomize_va_space
    
* How to disable Canary protection?
 : Use "-no-stack-protection" option.
 e.g. gcc overflow.c -o overflow -fno-stack-protector

* How to disable DEP?
 : Use "-z execstack" option
 :e.g. gcc vuln.c -o vuln_disable_dep -z execstack
 
* How to disable PIE?
 :  Use "-no-pie" option
 :e.g. gcc vuln.c -o vuln_disable_pie -no-pie
 
* Disable all of protection mechanisms listed above (warning: for local testing only):
 :gcc vuln.c -o vuln_disable_all -fno-stack-protector -z execstack -no-pie

*** For 32-bit machine, additionally use "-m32" option ***

** Data Execution Protection(DEP) and ASLR are the two pilars of modern exploit mitigation technologies.
** DEP remvoes executable capability from Heap and Stack. (No segment of memory should ever be Writable and
Executable at the same time) **
** DEP bypassing - Use Return Oriented Programming (ROP) ROP is a technique in exploitation to reuse existing code
gadgets in a target binary as a method to bypass DEP **
** What is Gadget in DEP?
  - A sequence of meaningful instructions typically followed by a return instruction
  - Usually multiple gadgets are chained together to compute malicious actions like shellcode does
  - These chains are called ROP Chains


What is FORTIFY_SOURCE? (Ref: https://stackoverflow.com/tags/fortify-source/info)
FORTIFY_SOURCE is a GCC and GLIBC security feature that attempts to detect certain classes of buffer overflows. 
Its enabled by default on most Linux platforms. When using the FORTIFY_SOURCE option, the compiler will insert 
code to call "safer" variants of unsafe functions if the compiler can deduce the destination buffer size. 
The unsafe functions include memcpy, mempcpy, memmove, memset, stpcpy, strcpy, strncpy, strcat, strncat, sprintf, 
snprintf, vsprintf, vsnprintf, and gets.
The option can be turned off with -D_FORTIFY_SOURCE=0 or -U_FORTIFY_SOURCE. However, its usually not appropriate 
to disable FORTIFY_SOURCE in production software.

Jakub Jelinek provided the GCC patch for FORTIFY_SOURCE back in 2004. The documentation for _FORTIFY_SOURCE is 
located in the "feature test macro" man page.

FORTIFY_SOURCE provides two countermeasures against fmt strings.
  1)   Format strings containing the %n specifier may not be located at a
       writeable address in the memory space of the application.

  2)   When using positional parameters, all arguments within the range 
       must be consumed. So to use %7$x, you must also use 1,2,3,4,5 and 6.

--------------------------------------------------------------------------------------------------------------
** checksec.sh (https://github.com/RobinDavid/checksec/blob/master/checksec.sh) **
 - checksec.sh is a bash scrip to check executable properties like (PIE, RELRO, PaX, Canaries, ASLR).

level18@nebula:~$ ./checksec.sh --file /home/flag18/flag18
RELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH      FILE
Partial RELRO   Canary found      NX enabled    No PIE          No RPATH   No RUNPATH   /home/flag18/flag18

level18@nebula:~$ ./checksec.sh --fortify-file /home/flag18/flag18
* FORTIFY_SOURCE support available (libc)    : Yes
* Binary compiled with FORTIFY_SOURCE support: Yes

 ------ EXECUTABLE-FILE ------- . -------- LIBC --------
 FORTIFY-able library functions | Checked function names
 -------------------------------------------------------
 fprintf_chk                    | __fprintf_chk
 fprintf_chk                    | __fprintf_chk
 fgets                          | __fgets_chk
 fgets                          | __fgets_chk
 sprintf_chk                    | __sprintf_chk
 sprintf_chk                    | __sprintf_chk
 asprintf                       | __asprintf_chk
 asprintf                       | __asprintf_chk

SUMMARY:

* Number of checked functions in libc                : 75
* Total number of library functions in the executable: 92
* Number of FORTIFY-able functions in the executable : 8
* Number of checked functions in the executable      : 4
* Number of unchecked functions in the executable    : 4
--------------------------------------------------------------------------------------------------------------

** Stack Top and Bottom **
High Address |            |
             |____________| Stack TOP
             |  params    |
             |____________|
             |  rtn addr  |   |
             |____________|   | Stack grows downward
             | saved ebp  |   v
   %esp ---> |____________| Stack BOTTOM
             |            |
Low Address  |            |

** rtn addr: Next instruction address within caller function
** saved ebp: Base address of caller. %ebp points to the start of current stack frame. When the current stack frame is done, saved ebp
   is saved to %ebp.
** %esp(Stack Pointer): Always points to the top of the current stack frame
** %ebp(Frame Pointer or Base pointer): points to the start of the stack frame and does not move 
                                        for the duration of the subroutine call.  

******* Printf and Printf's internal stack pointer *******
** Normal printf parameters, format string, and its stack structure **
char buf[20] = "%d:%d:%d";
printf(buf, 1, 2, 3) **

High Address |            | Stack TOP
             |____________| 
   0xabcdefff| "%d:%d:%d" | <-- buf
             |____________|              
     ^       |  ....      |
     |       |  3         | <-- Last value to print
     |       |  2         | <-- second value to print
  printf     |  1         | <-- First value to print            
stack pointer|____________|
             | 0xabcdefff | <-- Pointer to format string
             |____________| 
             | rtn address| <-- Return address for printf
             |------------|
             | saved ebp  |              
   %esp ---> |____________| Stack BOTTOM
             |            |
Low Address  |            |

- Printf stack structure
   : String format is saved somewhere caller's stack area
   : From last value to print to the first value to print, paramters are saved
   : Address of string format is saved under parameters
   : Printf's internal stack pointer is moving toward Stack TOP according to reading string format one by one.

** Printf format string and its stack structure with vulnerable call **
buff="\xe0\x85\x04\x08%x%x%x%s"; <-- "\xe0\x85\x04\x08" is saved as address like 0x080485e0.
printf(buff);

High Address |            | Stack TOP
             |____________| 
             | "%x%x%x%s" | <-- buff
             | 0x080485e0 |
0xabcdefff   |____________|              
             | tmp vals by|
     ^       | gcc        |
     |       |  .....     |
stack pointer|____________|
     |       | 0xabcdefff | <-- Pointer to format string (address of buff)
             |____________| 
             | rtn address| <-- Return address for printf
             |------------|
             | saved ebp  |              
   %esp ---> |____________| Stack BOTTOM
             |            |
Low Address  |            |

--------------------------------------------------------------------------------------------------------------
- Format string syntax 
 : %[parameter][flags][width][.precision][length]type
 ** Refer to : https://en.wikipedia.org/wiki/Printf_format_string

--------------------------------------------------------------------------------------------------------------
- Printf workflow
 : As string format is read, tmp vals generated by gcc will be read and printed.
 : If we place a proper number of %x and %s at the end, eventually we can reach 0x080485e0 with %s format string. The result of
  this is to read and print all content until null is met from the given memory address.
 : The challenge is to figure out how many %x we need to reach the target destination
   In the above example, if we use %n instead of %s, we can write a desired value into the target address. in our example, 0xabcdefff.
   As a trick, to avoid long format string for big value to write, width specification can be used.e.g. %10000x

- Format string alignment
 : If you cannot reach the exact format string boundary by using %08x (4-byte), you have to pad the format string, by prepending one,
 two, or three junk characters.
 e.g.) printf ("\x10\x01\x48\x08_%08x.%08x.%08x.%08x.%08x.|%s|"); If the address of format string is 0xabcdabcd at stack and you could
 reach 0xabcdabcb (2-byte away from the address of format string (0xabcdabcd), you can reach the boundary by prepending two junk 
 characters. printf ("AA\x10\x01\x48\x08_%08x.%08x.%08x.%08x.%08x.|%s|");
 
- Overwriting of arbitrary memory in the writeable process space with arbitrary data
 : Instrcution Pointer(IC - also called Program Counter(PC)). PC(IC) is a CPU register which stores the address of the next executing 
 instruction. Below we show different ways of overwriting Instruction Pointer and taking the control to the attcker supplied address
 by using format string vulnerability
 a) Similar to stack overflow
  {
       char      outbuf[512];
       char      buffer[512];

       sprintf (buffer, "ERR Wrong command: %400s", user);
       sprintf (outbuf, buffer);
  }

  By supplying a special format string we are able to circumvent the `%400s' limitation:

      "%497d\x3c\xd3\xff\xbf<nops><shellcode>" <= Whole format string size is less than 400 bytes.
    : %497d + "ERR Wrong command: " = 497 + 19 = 516, which is 4-byte bigger than outbuf and overwrites return address to 0xbfffd33c,
      where 0xbfffd33c is the address of exploiting code.
      
  b) Using pure format strings
   : Using format string vulnerability to write arbitrary data (Using %n)
   e.g. - Simple example
   {
      char     buffer[512];

      snprintf (buffer, sizeof (buffer), user);
      buffer[sizeof (buffer) - 1] = '\0';
   }
   
   User Input: "AAA0_%08x.%08x.%08x.%08x.%08x.%08x.%08x.%08x.%n"
   
   As secure printf, snprintf, is used, we cannot use the method used above a). However, if we use proper number of %08x and when stack
   pointer reaches at %n, it would printe the number of written bytes on 0x31414141, which is represented by AAA0. 
   The challenge here is how to write arbitrary data where AAA0 is located instead of pre-defined value.
   For this purpose we can use '%nu' to control '%n', where n is the number and 'u' is format string specifier of unsigned integer.
   
   Example)
    unsigned char       foo[4];
    printf ("%64u%n", 7350, (int *) foo);
    
    The foo[0] will have the value '0x40', which is 64 in decimal.
    From the example, we controlled 1-byte of '%n' (4-byte) by using '%64u'. 
  
   Below example shows how to write 4 bytes by writing 1-byte 4 times.
   Example)
         unsigned char      canary[5];
         unsigned char      foo[4];

         memset (foo, '\x00', sizeof (foo));
            /*
             Figure 1: Four stage overwrite of an address

                00 00 00 00                41 41 41 41
                10 00 00 00                41 41 41 41
                10 20 00 00                00 41 41 41
                10 20 30 00                00 00 41 41
                10 20 30 40                00 00 00 41
                10 20 30 40                00 00 00 41
             */
         strcpy (canary, "AAAA");

         /* 0 * start write */
         /* 1 */ printf ("%16u%n", 7350, (int *) &foo[0]);
         /* 2 */ printf ("%32u%n", 7350, (int *) &foo[1]);
         /* 3 */ printf ("%64u%n", 7350, (int *) &foo[2]);
         /* 4 */ printf ("%128u%n", 7350, (int *) &foo[3]);

         printf ("%02x%02x%02x%02x\n", foo[0], foo[1], foo[2], foo[3]);
         printf ("canary: %02x%02x%02x%02x\n", canary[0], canary[1], canary[2], canary[3]);

    ** Memory structure with above 4-stage writing
    High Address |            | Stack TOP
                 |____________| 
       canary[4] |    '\0'    |
       canary[3] |    'A'     |_____________________________
       canary[2] |    'A'     |____________________|'\x0'  |
       canary[1] |    'A'     |______________'\x0' |'\x0'  | 
       canary[0] |____'A'_____|______|'\x0' |'\x0' |'\x0'  |
          foo[3] |    '\x0'   |'\x0' |'\x0' |'\x0' |'\x80' |
          foo[2] |    '\x0'   |'\x0' |'\x0' |'\x40'|
          foo[1] |    '\x0'   |'\x0' |'\x20'|
          foo[0] |    '\x0'   |'\x10'|      |
                 |------------|-------------
                 | .......... | Stg1  Stg2   Stg3   Stg4            
                 |____________|
                 |            |
    Low Address  | (initial)  |
    
    As you can see, at the first stage writing, decimal number 16(0x00000010) will be written to next 4 byte (as we are using int *) 
    from the beginning of foo[0] address. Similarily, at the second stage writing, decimal number 32(0x00000020) will be written to 
    next 4 bytes from the beginning of foo[1] address.... Finally at the stage 4 writing, decimal number 128 (0x00000080) will be written
    to next 4 bytes from the beginning of foo[3] address. From the stage 2 writing, it trespasses the address space of canary array by
    one byte and overwrite the byte with '\x0'.
    Because of this, the output will be
     : "10204080" and "canary: 00000041"

    Above 4 lines of printf can be written in a one like below    
    : printf ("%16u%n%16u%n%32u%n%64u%n", 1, (int *) &foo[0], 1, (int *) &foo[1], 1, (int *) &foo[2], 1, (int *) &foo[3]);
    The only difference is the written bytes are accumulated from the beginning. Therefore the width number becomes 16u, 16u(32=16+16), 
    32u (64=32+32), and 64u(128 = 64+64)

    Overall procedure to write an arbitrary data on writable stack is like below.
    <stackpop><dummy-addr-pair * 4><write-code>
    a. Stackpop - The sequence of stack popping parameterS to increase the format function internal stack pointer
    b. dummy-addr-pair - 4 pairs of dummy integer and addresses to write data, On above example, "1, (int *) &foo[0]"
    c. write-code - The part of the format string that actually does the writing to the memory, by using `%nu%n' pairs, where n is 
        greater then 10. The first part is used to increase or overflow the least significant byte of the format function internal 
        bytes-written counter, and the `%n' is used to write this counter to the addresses that are within the dummy-addr-pair part 
        of the string.

--------------------------------------------------------------------------------------------------------------
Variation of exploitation
- Here we take a look at different ways of format string exploitation

1. Short write
- Instead of writing 4 times one byte overwriting above, we can write 2-byte at a time by using %nu with very big 'n' value and %hn
  where h is length specifier allowing short size(2-byte, c.f. hh allows a char(1-byte) ).
- The short write technique has one advantage over the first technique: It does not destroy data beside the address, so if there is 
  valueable data behind the address you are overwriting, such as a function parameter, then it is preserved.
  : e.g
   printf ("%.29010u%hn%.32010u%hn", 1, (short int *) &foo[0], 1, (short int *) &foo[2]); <- no overwrite except the given address
    Decimal 29010 => 0x7152, Decimal 32010 => 0x7d0a. So foo[0] = '\x52', foo[1] = '\x71', foo[2] = '\x0a', foo[3] = '\x7d'
  * Writing 4-byte padding by using very big padding like `%.3221219073u' is practically not working most of systems.
   
2. Stack popping - How to move internal stack pointer greatly by using less bytes of format string?
- '%u': 2-byte format string but can pop 4-byte 
- '%f': 2-byte format string but can pop 8-byte. This specifier can cause divide-by-zero error. Better specifier is using '%.f'
  where it uses 3-byte but pop 8-byte.
- Use '*' specifier. e.g. '%*d' retrieves the length of the output dynamically: the next format parameter on the stack.
  e.g. printf("%*d", 5, 10) => output: '   10'
  '%******d': Each '*' will pop 4-byte from the stack as a length specifier. With this, we cannot predict the output length as the lenght
  is dynamically retrieved from the stack. As a tric, we can use like '%******10d'. It will always print 10 bytes, no matter what was 
  peeked from the stack before.
  
3. Direct parameter access
- Use n$ parameter, where n is n-th parameters provided
 : e.g. printf ("%6$d\n", 6, 5, 4, 3, 2, 1); => Print 1 as %6$d represents 6-th parameter on the stack, which is 1.
- Advantages
 : Huge simplication of a way to directly address a stack parameter from within the format string
 : Almost all currently in use C libraries do support this feature but not all
- Limitation
 : BSD - Direct parameter access is limited to only first eight parameters
 : Solaris - Limited to first 30 parameters
- Recommendation
 : Use stack popping whenever possible as more portable but if supported, use Direct parameter access
- Example
  char     foo[4];
  printf ("%1$16u%2$n" "%1$16u%3$n" "%1$32u%4$n" "%1$64u%5$n", 1, (int *) &foo[0], (int *) &foo[1], (int *) &foo[2], (int *) &foo[3]);
  printf ("%02x%02x%02x%02x\n", foo[0], foo[1], foo[2], foo[3]);
  
  Output: "\x10\x20\x40\x80"

  *** Memory structure ***
    High Address |                | Stack TOP
                 |                | 
                 |________________|_____________________________
          foo[3] |    '\x0'       |      |      |      |'\x80' |
          foo[2] |    '\x0'       |      |      |'\x40'|       |
          foo[1] |    '\x0'       |      |'\x20'|      |       |
          foo[0] |    '\x0'       |'\x10'|      |      |       |
                 |------------    |-----------------------------
                 |    ....        |       ------------->
                 |(int *) &foo[3] | <- Write 0x80 into LSB of (int *)foo[3]                 
                 |(int *) &foo[2] | <- Write 0x40 into LSB of (int *)foo[2]                 
                 |(int *) &foo[1] | <- Write 0x20 into LSB of (int *)foo[1]
                 |(int *) &foo[0] | <- Write 0x10 into LSB of (int *)foo[0]
                 |     1          | <- 1st paramters
                 | rtn address    | <-- Return address for printf
                 |                |
                 | saved ebp      |              
                 |________________|
                 |                |
    Low Address  | (initial)      |

--------------------------------------------------------------------------------------------------------------
Brute forcing
- The challenges with buffer overflow and/or format string exploitation is to find right offset (what to write where)
- Finding multiple necessary offsets increase the complexity enormously.
- Here two very different methods are explained; 'Response Based Brute Force' and 'Blind Brute Forcing'

1. Response based Brute force
: Basic idea - By observing the printed format replies, determine the return address (retaddr) and the return address location (retloc)
a. Calculate the distance of fromat string from the current position
 - Use "AAAABBBB|stackpop|%08x|" where stackpop will be increased until it hits the beginning of format string
  : e.g. If the output of given format string, "AAAABBBB|%u%u%u%u%u%u%u%u|%08x|" looks like this;
   "AAAABBBB|983217938177639561760134608728913021|41414141|", this means that a give format string hits the beginning of format string
   and the format string is 32-byte away from the Stack's "Address of format string".
   41414141 is the hexadeciaml representation of 'AAAA'. %u*8 printed out "983217938177639561760134608728913021" and %8x printed the 
   hex value of 'AAAA' according to the format of %8x.
 - If you cannot reach to the pattern of 'AAAA', this means
  i) alignment is not on a four byte boundary
   : Simplay prepend one, two, or three dummy bytes to format string
    e.g. if two bytes are short to be algined, add two 'CC' like this -> AAAABBBBCC|stackpop|%08x|
  ii). The distance to the format string is too big to reach (e.g. format string is located at heap)
  
b. Once you have the distance and the alignment, you can start brute forcing the format string buffer address.
 - Use this to figure out if a given address is hitting format string or target buffer
   "addr|stackpop|______________________________%%|%s|"  <= addr and stackpop will no to anything harmful.
     |                            ^
     |____________(1)_____________|
 - Two possible scenarios
  i) "addr" directly points into our format string (two '%' characters) and its output
   "garbage|___________________________%|______%%|%s||" <= %% converts to %, then %%|%s| is inserted by the %s of given format string
   ** garbage consists out of the 'addr' and 'stackpop' output
   
  ii) (Didn't understand this!!) "addr" accidently points into target buffer (only one '%' characters) and its output
   - This allows us to exactly predict the target buffer address which is useful when the format string buffer is in the heap itself.
   "garbage|___________________________%|______%||"   <= Only one '%' is visible, since it was converted by the format function
   ** garbage consists out of the 'addr' and 'stackpop' output

2. Blind Brute forcing
 : Not straight forward method, relatively complex and only useful for special situations.
 : Basic idea is to measure the time it takes for the remote computer to process the format string.

--------------------------------------------------------------------------------------------------------------
Format string special exploits with more straight forward and most reliable

1. Alternative targets (Alternatively overwritable places with format string exploits)
- Unlike stack overflow where you can only overwrite the return address, with format string you can write anywhere into the memory,
  allowing us to modify the entire writable process space. Here are the alternatively overwritable target addresses.

  1.1 GOT overwrite


  1.2 DTORS

  1.3 C library hooks

  1.4 __atexit structures

  1.5 function pointers

  1.6 jupbuf's

2. Return into LibC

3. Multiple Print

4. Format string within the Heap

5. Special considerations
- How to write a specific lenght of dummy bytes to reach the destination?
%1$*479$ %1$*2848$ %1073741824$

- How Printf works with internal stack pointer? https://oded.blog/2017/05/24/printf/
- We can not move the stack pointer byte-wise, instead we move the format string itself, so that it lies on a four-byte boundary 
to the stack pointer and we can reach it with a multiple of four-byte pops

====================================================================================================
Solution from https://www.voidsecurity.in/2012/09/exploit-exercise-format-string.html
- Out of my knowledge.. just try to understand how it works. 
- Three protections used in the code
  1. FORTIFY_SOURCE protection - This solution follows A Eulogy for Format Strings of Phrack to bypass this protection
  2. Address Space Layout Randomization (ASLR)- This solution disable ASLR only for debugging purpose and enable it when a working exploit 
     is ready. No effect to exploit
  3. libc randomization - Libc randomization can be disabled using resource limit in case needed. No effect to exploit




Ref: 
Buffer Overflow 101: https://www.coengoedegebure.com/buffer-overflow-attacks-explained/
tseo paper - Format string exploitation: https://crypto.stanford.edu/cs155old/cs155-spring08/papers/formatstring-1.2.pdf
tseo: https://www.win.tue.nl/~aeb/linux/hh/formats-teso.html
Format string 101: https://www.hackerschool.org/HS_Boards/data/Lib_system/The_Mystery_of_Format_String_Exploitation.pdf
Nebula Level18 Information Leak solution: https://www.voidsecurity.in/2012/09/defeating-aslr-using-information-leak.html
Nebula Level18 - FORTYFY_SOURCE bypass solution: https://www.voidsecurity.in/2012/09/exploit-exercise-format-string.html

Print format string options: https://en.wikipedia.org/wiki/Printf_format_string
General format string: http://www.cis.syr.edu/~wedu/Teaching/cis643/LectureNotes_New/Format_String.pdf
Phrack: http://phrack.org/issues/67/9.html
In-depth about GOT: http://phrack.org/issues/56/5.html

Security Lecture: http://security.cs.rpi.edu/courses/binexp-spring2015/

