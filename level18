Question URL: https://exploit.education/nebula/level-18/

Source Code:
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <stdio.h>
#include <sys/types.h>
#include <fcntl.h>
#include <getopt.h>

struct {
  FILE *debugfile; // File descriptor
  int verbose;
  int loggedin;
} globals;

// Variadic macro - A macro used to accept a varying number of arguments
// __VA_ARGS__: Variable number of arguments. During macro expansion each
// occurrence of the special identifier __VA_ARGS__ in the macro replacement
// list is replaced by the passed arguments
// Example
// #define DEBUG(...) printString(__VA_ARGS__)
// DEBUG("foo", "bar", "baz") is replaced with printString("foo", "bar", "baz")

#define dprintf(...) if(globals.debugfile) \
  fprintf(globals.debugfile, __VA_ARGS__)
#define dvprintf(num, ...) if(globals.debugfile && globals.verbose >= num) \
  fprintf(globals.debugfile, __VA_ARGS__)

#define PWFILE "/home/flag18/password"

// Take a password file as an Input and compare the password from the password
// file and a given password. If exact match is found( return 0), set
// globals.loggedin value to 1
void login(char *pw)
{
  FILE *fp;

  fp = fopen(PWFILE, "r");
  if(fp) {
      char file[64];

      if(fgets(file, sizeof(file) - 1, fp) == NULL) {
          dprintf("Unable to read password file %s\n", PWFILE);
          return;
      }
                fclose(fp);
      if(strcmp(pw, file) != 0) return;
  }
  dprintf("logged in successfully (with%s password file)\n",
      fp == NULL ? "out" : "");

  globals.loggedin = 1;

}

// If notsupported() is called, display error message and if globals.debugfile
// is defined, write "what" argument into the debugfile.
void notsupported(char *what)
{
  char *buffer = NULL;
  asprintf(&buffer, "--> [%s] is unsupported at this current time.\n", what);
  dprintf(what);
  free(buffer);
}

// If setuser(char *user) is called, display an error message and print the
// message to stdout
void setuser(char *user)
{
  char msg[128];

  sprintf(msg, "unable to set user to '%s' -- not supported.\n", user);
  printf("%s\n", msg);

}

// Takes options -d debugfile_name and/or -v
int main(int argc, char **argv, char **envp)
{
  char c;

  // Do while loop until all options are taken care.
  // d option: Save file descriptor to globals.debugfile. If file open fails
  //           print "Unable to open filename"
  //           If file open successes, immediately write(_IONBF) stream content
  //           to globals.debugfile
  // v option: Increase globals.verbose value by one. 'v' option can be more
  //           than one, like '-vvv' for increased verbosity
  while((c = getopt(argc, argv, "d:v")) != -1) {
      switch(c) {
          case 'd':
              globals.debugfile = fopen(optarg, "w+");
              if(globals.debugfile == NULL) err(1, "Unable to open %s", optarg);
              // int setvbuf(FILE *stream, char *buffer, int mode, size_t size)
              // Used to control or how a stream should be buffered.
              // If buffer is set to null, the function automatically allocates
              // a buffer of the specified size.
              // mode: Determine when to write streaming content
              //      _IOFBF: Full buffering. Content is written when buffer is
              //              full
              //      _IOLBF: Line buffering. When a newline is inserted
              //      _IONBF: No buffering. Immediately write
              setvbuf(globals.debugfile, NULL, _IONBF, 0);
              break;
          case 'v':
              globals.verbose++;
              break;
      }
  }

  dprintf("Starting up. Verbose level = %d\n", globals.verbose);

  setresgid(getegid(), getegid(), getegid());
  setresuid(geteuid(), geteuid(), geteuid());

  while(1) {
      char line[256];
      char *p, *q;

      q = fgets(line, sizeof(line)-1, stdin);
      if(q == NULL) break;
      // strchr(const char *s, int c) - Locate character in string
      // If a match is found(linefeend and newline), replace newline and
      // linefeed with 0 - Make inputs to one line
      p = strchr(line, '\n'); if(p) *p = 0;
      p = strchr(line, '\r'); if(p) *p = 0;

      // If globals.debugfile is defined and globals.verbose is greater than
      // 2 like -vv or -vvv, write the input(line) into global.debugfile
      dvprintf(2, "got [%s] as input\n", line);

      if(strncmp(line, "login", 5) == 0) {
          dvprintf(3, "attempting to login\n");
          // Input format: login password
          login(line + 6);
      } else if(strncmp(line, "logout", 6) == 0) {
          globals.loggedin = 0;
      } else if(strncmp(line, "shell", 5) == 0) {
          dvprintf(3, "attempting to start shell\n");
          if(globals.loggedin) {
              execve("/bin/sh", argv, envp);
              err(1, "unable to execve");
          }
          dprintf("Permission denied\n");
      } else if(strncmp(line, "logout", 4) == 0) {
          globals.loggedin = 0;
      } else if(strncmp(line, "closelog", 8) == 0) {
          if(globals.debugfile) fclose(globals.debugfile);
          globals.debugfile = NULL;
      } else if(strncmp(line, "site exec", 9) == 0) {
          // Input format: site exec Hello
          notsupported(line + 10);
      } else if(strncmp(line, "setuser", 7) == 0) {
          // Input format: setuser username
          setuser(line + 8);
      }
  }

  return 0;
}
